{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red204\green0\blue78;\red255\green255\blue254;\red0\green0\blue0;
\red39\green78\blue204;\red42\green55\blue62;\red21\green129\blue62;\red107\green0\blue1;\red238\green57\blue24;
}
{\*\expandedcolortbl;;\cssrgb\c84706\c10588\c37647;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c20000\c40392\c83922;\cssrgb\c21569\c27843\c30980;\cssrgb\c5098\c56471\c30980;\cssrgb\c50196\c0\c0;\cssrgb\c95686\c31765\c11765;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh18360\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 -- DATA PREPARATION, CLEANING AND TRANSFORMATION \cf0 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ## PREPARATION\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- script to check if imported data is complete\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 ride_id\cf6 \strokec6 )\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.January22_bike_share`\cf0 \strokec4 ; \cf2 \strokec2 -- change table for each month\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to test if start_station and end_station data could be used in this project given a lot of observed missing data\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- there are 692 docking stations tracked by geotracking, hence we should have 692 unique station names or id if properly captured.\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: we have different number of station_names/id and over 692. We won't be able to use this data. Data for these fields are incosistent\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- I'd recommend improvement on geotracking to capture location record with better integrity.\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 DISTINCT\cf0 \strokec4  start_station_name\cf6 \strokec6 )\cf0 \strokec4  \cf2 \strokec2 -- test with both station id and station name if either works\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.September22_bike_share`\cf0 \strokec4  \cf2 \strokec2 -- flip between months to check if we have consistent numbers\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to append all tables with relevant data: \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- ride_id, member_casual, rideable_type, started_at, ended_at and forming a new temporary table Year22_bike_share\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 WITH\cf0 \strokec4  Year22_bike_share \cf5 \strokec5 AS\cf0 \strokec4  \cf6 \strokec6 (\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.January22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.February22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.March22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.April22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.May22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.June22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.July22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.August22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.September22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.October22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.November22_bike_share`\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 UNION\cf0 \strokec4  \cf5 \strokec5 ALL\cf0 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf0 \strokec4  ride_id, member_casual, rideable_type, started_at, ended_at\cb1 \
\cb3   \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.December22_bike_share`\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 )\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  Year22_bike_share; \cf2 \strokec2 -- saved as new table to be cleaned and transformed\cf0 \cb1 \strokec4 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to test for complete data in append table Year22_bike_share\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 ride_id\cf6 \strokec6 )\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## CLEANING\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Test to check if duplicate records exist\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: NO DUPLICATES\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 DISTINCT\cf0 \strokec4  ride_id\cf6 \strokec6 )\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test for consistent data (consistent spelling, extra/special characters) across rideable_type\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: rideable_type (data has an inaccurate category docked_bike): docked_bike, classic_bike, electric_bike\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## docked_bike: these rideable_type appears incosistent, occurs only for casual members even though with travel times. \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## The business also acknowledges it's bike offering are classic and electric bikes.Typically docked_bike should be bikes not in use.  \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## We would filter off these data as it might bias the data\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 rideable_type\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  bike_type\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to further investigate docked_bike type\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  rideable_type, member_casual, \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (*)\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  number_of_members\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  rideable_type, member_casual\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test for consistent data (consitent spelling, extra/special characters) across member_casual\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: member_casual (data is consistent): casual, member\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 member_casual\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  membership_type\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test each column if missing data exists for each field\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## ride_id: none exists\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## member_casual: none exists\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## rideable_type: none exists\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## started_at: none exists\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## ended_at: none exists\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  started_at \cf2 \strokec2 -- change field\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  started_at \cf5 \strokec5 IS\cf0 \strokec4  \cf5 \strokec5 NULL\cf0 \strokec4 ; \cf2 \strokec2 -- change field\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to evaluate if there exists any record where started_at is greater than (and equal to) ended_at\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: > Yes there exist 100 records where started_at is greater than ended_at\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Result: = Yes there exist 431 records where started_at is equal to ended_at\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  started_at, ended_at\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  started_at \cf6 \strokec6 >\cf0 \strokec4  ended_at \cf2 \strokec2 -- change conditional operator to = for second test result\cf0 \cb1 \strokec4 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to update Year22_bike_share table to correct records where started_at > ended_at by swapping those records\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 UPDATE\cf0 \strokec4  \cf7 \strokec7 `bike-share-marketing-campaign.bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SET\cf0 \strokec4  \cf8 \strokec8 started_at\cf0 \strokec4  = ended_at, \cf8 \strokec8 ended_at\cf0 \strokec4  = started_at\cb1 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  started_at \cf6 \strokec6 >\cf0 \strokec4  ended_at\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- script to drop off records where started_at = ended_at from Year22_bike_share table. The assumption is that these rides didn't happen\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 DELETE\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf0 \strokec4  \cb1 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 started_at\cf0 \strokec4  = ended_at\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## TRANSFORM\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Transform Year22_bike_share table to include the following calculated fields:\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## travel_time - in minutes (use Timestamp_Diff) - we are basing in minutes since this is a more logical minimum baseline for most travel\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Clock in hours/time (Use Extract for hours, Extract and Trunc for time)\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Clock in Day (Use Extract DayofWeek and a nested query using CASE WHEN)\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## Season (Use CASE WHEN with started_at)\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## Test season_of_the_year categorisation\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## RESULT: all seasons are correctly categorised to corresponding date range\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Test 1: to test that each date range corresponds to the correct season\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 MIN\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  Min_date, \cf5 \strokec5 MAX\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  Max_date,\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3            \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3     \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  test_transform_table\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 season_of_the_year\cf0 \strokec4  = \cf7 \strokec7 "Spring"\cf0 \strokec4  \cf2 \strokec2 -- modify to season_of_the_year (Spring, Summer, Autumn, Winter)\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test 2: to test that we do not have any missed_range in the category, and that only 4 seasons exists\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  season_of_the_year\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3         \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3         \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3         \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3         \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  test_transform_table\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test 3: to test that the season winter has no categorisation outside the date range 2022-12-21 - 2022-03-19 or exist between the spring (2022-03-20) to Autumn (2022-12-20) date range\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 --         this follow up test is to double check since the date range test in test 1 reflects a min and max date range equal to the start and end date of the year.\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  season_of_the_year\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3         \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3         \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3         \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3         \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  test_transform_table\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf5 \strokec5 CAST\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \cb1 \strokec4 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## Test Day of Week\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## RESULT: There are 7 distinct day_of_week ranging from 1-7\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- test that there are 7 distinct day_of_week ranging from 1-7\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  day_of_week\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 ORDER\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  day_of_week\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## Test Clock in hours & time\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Test 1: test that there are 24 distinct hours ranging from 0-23\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  clock_in_hour\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 ORDER\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  clock_in_hour\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- Test 2: test that the min and max time range are 00:00:00 and 23:59:00 respectively\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 MIN\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 clock_in_time\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  min_clock_in_time, \cf5 \strokec5 MAX\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 clock_in_time\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  max_clock_in_time\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## Test travel_time_in_minutes\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Test 1: test if there are records with less than 1 minute, hence travel_time_in_minutes = 0\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## RESULT: Yes, there are records with less than 1 minute travel (0 minutes). \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- when checked what could lead to such rides these observations came in \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- that rides less than 1 minute are either due to continuation rides from riders who want to avoid extra charges, other explanations could be \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- riders who didn't eventually take on their full rides as planned, or riders who noticed fault with bikes\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- Action: Caveat to filter off to avoid biasing the data\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 MIN\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 travel_time_in_minutes\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  min_travel_time, \cf5 \strokec5 MAX\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 travel_time_in_minutes\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  max_travel_time\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## FULL TABLE TRANSFORMATION FOR ANALYSIS\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- expand Day_of_week into clock_in_day, expressed as Sunday, Monday, ..., Saturday\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 ,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 1\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Sunday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 2\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Monday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 3\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Tuesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 4\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Wednesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 5\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Thursday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 6\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Friday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 7\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Saturday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_cat"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_day\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3       \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table \cf2 \strokec2 -- FULL TABLE TRANSFORMATION FOR ANALYSIS\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## Test if we have any missed_cat in clock_in_day\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## RESULT: no missed_cat, clock_in_day correctly categorised\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  \cf5 \strokec5 DISTINCT\cf0 \strokec4  clock_in_day\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 ,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 1\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Sunday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 2\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Monday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 3\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Tuesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 4\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Wednesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 5\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Thursday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 6\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Friday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 7\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Saturday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_cat"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_day\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\cb3             \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3             \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3             \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3             \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3             \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  test_table\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 --script to test day_of_week and clock_in_day are correctly categorised\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## RESULT: correctly categorised\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  day_of_week, clock_in_day\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 ,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 1\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Sunday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 2\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Monday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 3\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Tuesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 4\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Wednesday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 5\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Thursday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 6\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Friday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 WHEN\cf0 \strokec4  \cf8 \strokec8 day_of_week\cf0 \strokec4  = \cf9 \strokec9 7\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Saturday"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_cat"\cf0 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_day\cb1 \
\cb3       \cf5 \strokec5 FROM\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf0 \strokec4  \cf6 \strokec6 *\cf0 \strokec4 , \cb1 \
\cb3             \cf5 \strokec5 TIMESTAMP_DIFF\cf6 \strokec6 (\cf0 \strokec4 ended_at, started_at, MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  travel_time_in_minutes,\cb1 \
\cb3             \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 HOUR \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_hour, \cf5 \strokec5 TIME_TRUNC\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 TIME\cf0 \strokec4  \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4 , MINUTE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  clock_in_time,\cb1 \
\cb3             \cf5 \strokec5 EXTRACT\cf0 \strokec4  \cf6 \strokec6 (\cf0 \strokec4 DAYOFWEEK \cf5 \strokec5 FROM\cf0 \strokec4  started_at\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  day_of_week,\cb1 \
\cb3             \cf5 \strokec5 CASE\cf0 \strokec4  \cf5 \strokec5 WHEN\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-01-01'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-03-19'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 OR\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-12-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-31'\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Winter"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-03-20'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-06-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Spring"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-06-21'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-09-22'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Summer"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 WHEN\cf0 \strokec4  \cf5 \strokec5 CAST\cf6 \strokec6 (\cf0 \strokec4 started_at \cf5 \strokec5 AS\cf0 \strokec4  \cf5 \strokec5 DATE\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 BETWEEN\cf0 \strokec4  \cf7 \strokec7 '2022-09-23'\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf7 \strokec7 '2022-12-20'\cf0 \strokec4  \cf5 \strokec5 THEN\cf0 \strokec4  \cf7 \strokec7 "Autumn"\cf0 \strokec4  \cf2 \strokec2 -- CAST func used to convert timestamp to date inorder to include upper date range when evaluating case statement\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 ELSE\cf0 \strokec4  \cf7 \strokec7 "missed_range"\cf0 \cb1 \strokec4 \
\cb3                   \cf5 \strokec5 END\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  season_of_the_year\cb1 \
\cb3             \cf5 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.Year22_bike_share`\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 as\cf0 \strokec4  test_transform_table\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  test_table\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  clock_in_day, day_of_week\cb1 \
\cf5 \cb3 \strokec5 ORDER\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  day_of_week\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- export and save as new table (full table transformation for analysis) as bike_share_analysis_table. Note that this new table still maintains travel-time_in_minutes = 0 and rideable_type = docked_bike, \cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- they will both be filtered off during analysis\cf0 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 ## ANALYSIS\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ## total number of useful data points for analysis across member groups\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  member_casual, \cf5 \strokec5 COUNT\cf0 \strokec4  \cf6 \strokec6 (*)\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  total\cb1 \
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.bike_share_analysis_table`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 travel_time_in_minutes\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf9 \strokec9 0\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf8 \strokec8 rideable_type\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf7 \strokec7 "docked_bike"\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  member_casual \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## 1 - Travel time: Is there a difference in the (average) travel time traveled between casual and annual members?\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- RESULT: casual members avg_ride_length = 21 mins ; members avg_ride_length = 13 mins\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  member_casual \cf5 \strokec5 AS\cf0 \strokec4  User_Group,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       \cf5 \strokec5 ROUND\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 AVG\cf6 \strokec6 (\cf0 \strokec4 travel_time_in_minutes\cf6 \strokec6 )\cf0 \strokec4 ,\cf9 \strokec9 0\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  average_ride_length\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.bike_share_analysis_table`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 travel_time_in_minutes\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf9 \strokec9 0\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf8 \strokec8 rideable_type\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf7 \strokec7 "docked_bike"\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  User_Group\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## 1b. Average travel time across both user groups by day\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  member_casual \cf5 \strokec5 AS\cf0 \strokec4  User_Group,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       clock_in_day \cf5 \strokec5 AS\cf0 \strokec4  Time_of_Day,\cb1 \
\cb3       \cf5 \strokec5 ROUND\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 AVG\cf6 \strokec6 (\cf0 \strokec4 travel_time_in_minutes\cf6 \strokec6 )\cf0 \strokec4 ,\cf9 \strokec9 0\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  average_ride_length\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.bike_share_analysis_table`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 travel_time_in_minutes\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf9 \strokec9 0\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf8 \strokec8 rideable_type\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf7 \strokec7 "docked_bike"\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  User_Group, Time_of_Day\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 ## 1c. Average travel time across both user groups by season of the year\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 SELECT\cf0 \strokec4  member_casual \cf5 \strokec5 AS\cf0 \strokec4  User_Group,\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3       season_of_the_year \cf5 \strokec5 AS\cf0 \strokec4  Season,\cb1 \
\cb3       \cf5 \strokec5 ROUND\cf0 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 AVG\cf6 \strokec6 (\cf0 \strokec4 travel_time_in_minutes\cf6 \strokec6 )\cf0 \strokec4 ,\cf9 \strokec9 0\cf6 \strokec6 )\cf0 \strokec4  \cf5 \strokec5 AS\cf0 \strokec4  average_ride_length\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 FROM\cf0 \strokec4  \cf7 \strokec7 `bike_share.bike_share_analysis_table`\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf0 \strokec4  \cf8 \strokec8 travel_time_in_minutes\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf9 \strokec9 0\cf0 \strokec4  \cf5 \strokec5 AND\cf0 \strokec4  \cf8 \strokec8 rideable_type\cf0 \strokec4  \cf6 \strokec6 !=\cf0 \strokec4  \cf7 \strokec7 "docked_bike"\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  User_Group, Season\cb1 \
\cf5 \cb3 \strokec5 ORDER\cf0 \strokec4  \cf5 \strokec5 BY\cf0 \strokec4  Season\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 -- move bike_share_analysis_table to Tabelau for analysis and visualization for time efficiency\cf0 \cb1 \strokec4 \
\
}